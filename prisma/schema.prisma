// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Optional because Google auth users won't have a password
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Freelancer specific fields
  bio           String?   @db.Text
  skills        String[]  @default([])
  hourlyRate    Float?
  stripeConnectId String?
  isAvailable   Boolean   @default(true)
  
  accounts      Account[]
  sessions      Session[]
  orders        Order[]   // Orders placed by the user
  claimedOrders Order[]   @relation("FreelancerOrders") // Orders claimed by the freelancer
  reviews       Review[]  // Reviews given by the user
  receivedReviews Review[] @relation("FreelancerReviews") // Reviews received as a freelancer
  messages      Message[] // Messages sent by the user
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  CUSTOMER
  FREELANCER
}

enum OrderStatus {
  PENDING     // Initial state when order is created
  CLAIMED     // When a freelancer claims the order
  IN_PROGRESS // Work has started
  IN_REVIEW   // Client is reviewing the work
  REVISION    // Client has requested changes
  COMPLETED   // Order is finished and accepted
  CANCELLED   // Order has been cancelled
}

model Order {
  id          String      @id @default(cuid())
  title       String
  description String      @db.Text
  status      OrderStatus @default(PENDING)
  price       Float
  
  // Order options and customization
  options     Json?       // Store selected options as JSON
  requirements String?    @db.Text
  deadline    DateTime?
  
  // File management
  sourceFiles FileUpload[] @relation("SourceFiles")
  deliveryFiles FileUpload[] @relation("DeliveryFiles")
  
  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  freelancerId String?
  freelancer   User?      @relation("FreelancerOrders", fields: [freelancerId], references: [id])
  review      Review?
  messages    Message[]
  
  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Payment
  stripePaymentIntentId String?
  isPaid      Boolean     @default(false)
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      @db.SmallInt
  comment     String   @db.Text
  reply       String?  @db.Text
  
  // Relations
  orderId     String   @unique
  order       Order    @relation(fields: [orderId], references: [id])
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  freelancerId String
  freelancer   User    @relation("FreelancerReviews", fields: [freelancerId], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  
  // Relations
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  senderId  String
  sender    User     @relation(fields: [senderId], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FileUpload {
  id          String   @id @default(cuid())
  filename    String
  key         String   // Storage key in R2
  size        Int
  mimeType    String
  uploadedAt  DateTime @default(now())
  
  // Relations
  orderId     String
  sourceOrder Order?   @relation("SourceFiles", fields: [orderId], references: [id])
  deliveryOrder Order? @relation("DeliveryFiles", fields: [orderId], references: [id])
} 